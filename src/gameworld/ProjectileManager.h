#pragma once

//-----------------------------------------------------------------------------

#include <list>

#include "objects\ProjectileObj.h"
//#include "objects\AIProjectile.h"
#include "objects\PlayerProj.h"

//-----------------------------------------------------------------------------

typedef std::list<ProjectileObj*> ProjectileList;
typedef ProjectileList::iterator ItrProjectileList;
typedef ProjectileList::const_iterator CItrProjectileList;

//-----------------------------------------------------------------------------

/**
 * Keeps track of the type of projectile to create.
 */
enum ProjectileEnum
{
	PROJECTILE, /**< a normal projectile */
	AIPROJECTILE, /**< a projectile generated by an AI */
	PLAYER_PROJECTILE /**< a projectile generated by a player */
};

//-----------------------------------------------------------------------------

/**
 * \file ProjectileManager.h ProjectileManager.cpp
 * \class ProjectileManager
 * \brief ProjectileManager class implementation.
 *
 * Sets up an interface to manage projectiles.
 *
 * \author Timothy Veletta, Arran Ford
 * \date 29/09/12
 * \version 01 - Timothy Veletta 02/11/12
 *		Created class with AddProjectile, UpdateProjectile and RemoveProjectile
 *		functions.
 * \version 02 - Timothy Veletta, 04/11/12
 *		Added the GetCurrentPosition, GetNumProjectiles functions.
 */
class ProjectileManager
{
public:
	/**
	 * \brief Adds a projectile.
	 *
	 * Adds the projectile to the list of projectiles currently displayed.
	 *
	 * \param type the type of projectile
	 * \param startX the start x position of the projectile
	 * \param startZ the start z position of the projectile
	 * \param endX the end x position of the projectile
	 * \param endZ the end z position of the projectile
	 */
	static void AddProjectile(ProjectileEnum type, double startX, double startZ,
							double endX, double endZ);

	/**
	 * \brief Updates the projectiles.
	 *
	 * Goes through and calls the update function of all the projectiles.
	 */
	static void UpdateProjectiles();

	/**
	 * \brief Returns the current position.
	 *
	 * Returns the current position of the projectile at the position
	 * pointed to by the iterator.
	 *
	 * \param index the position of the projectile in question
	 * \retval the current position of the projectile
	 */
	static Vector3 GetCurrentPosition(CItrProjectileList index);

	/**
	 * \brief Returns the number of projectiles.
	 *
	 * Returns the current number of projectiles.
	 *
	 * \retval the current number of projectiles
	 */
	static int GetNumProjectiles();

	static ProjectileList projectiles; /**< the projectile list */

	/**
	 * \brief Gets the list of projectiles
	 *
	 * Returns the current list of projectiles.
	 *
	 * \retval the current projectile list
	 */
	static ProjectileList GetList();
private:
	/**
	 * \brief Remove a projectile from the list.
	 *
	 * Removes the projectile at the given index.
	 *
	 * \param index the index of the projectile to be removed
	 */
	static void RemoveProjectile(CItrProjectileList index);
};

//-----------------------------------------------------------------------------