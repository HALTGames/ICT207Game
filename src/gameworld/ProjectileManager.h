#pragma once

//-----------------------------------------------------------------------------

#include <list>

#include "objects\ProjectileObj.h"
#include "objects\AIProjectile.h"
#include "objects\PlayerProj.h"

//-----------------------------------------------------------------------------

typedef std::list<ProjectileObj*> ProjectileList;
typedef ProjectileList::iterator ItrProjectileList;
typedef ProjectileList::const_iterator CItrProjectileList;

//-----------------------------------------------------------------------------

/**
 * Keeps track of the type of projectile to create.
 */
enum ProjectileEnum
{
	PROJECTILE, /**< a normal projectile */
	AIPROJECTILE, /**< a projectile generated by an AI */
	PLAYER_PROJECTILE /**< a projectile generated by a player */
};

//-----------------------------------------------------------------------------

/**
 * \file ProjectileManager.h ProjectileManager.cpp
 * \class ProjectileManager
 * \brief ProjectileManager class implementation.
 *
 * Sets up an interface to manage projectiles.
 *
 * \author Timothy Veletta, Arran Ford
 * \date 29/09/12
 * \version 01 - Timothy Veletta 02/11/12
 *		Created class with AddProjectile, UpdateProjectile and RemoveProjectile
 *		functions.
 * \version 02 - Timothy Veletta, 04/11/12
 *		Added the GetCurrentPosition, GetNumProjectiles functions.
 */
class ProjectileManager
{
public:
	/**
	 *
	 *
	 *
	 *
	 *
	 *
	 */
	static void AddProjectile(ProjectileEnum type, double startX, double startZ,
							double endX, double endZ);

	static void UpdateProjectiles();

	static Vector3 GetCurrentPosition(CItrProjectileList index);

	static int GetNumProjectiles();

	static ProjectileList projectiles; 

	static ProjectileList GetList();
private:
	static void RemoveProjectile(CItrProjectileList index);
};

//-----------------------------------------------------------------------------